<?php

namespace EcommerceBundle\Listener;

use Doctrine\Common\EventSubscriber;
use Doctrine\ORM\Event\LifecycleEventArgs;
use EcommerceBundle\Entity\Product;

class Product_imageListener implements EventSubscriber
{

    private $directoryImage;

    public function __construct($directory)
    {

        $this->directoryImage = $directory;

    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }


    public function prePersist(LifecycleEventArgs $args)
    {

        $entity = $args->getEntity();
        if (!$entity instanceof Product) {
            return;

        }

        $file = $entity->getImage();
        $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

        $file->move($this->directoryImage, $fileName);

        $entity->setImage($fileName);

    }


    /**
     * Returns an array of events this subscriber wants to listen to.
     *
     * @return array
     */
    public function getSubscribedEvents()
    {
        return array(
            'prePersist',
        );
    }
}

